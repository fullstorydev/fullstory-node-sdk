{{! 
This file is mostly a duplicate of typescript-node template with minor changes.
TODO(sabrina): change as neccessary for FullStory APIs.
}}
/* eslint-disable simple-import-sort/exports */
/* eslint-disable simple-import-sort/imports */

{{>info}}
import { OutgoingHttpHeaders } from 'node:http';
import { RequestOptions } from 'node:https';
{{#tsImports}}

{{#entrySet}}
import { {{key}} } from '@model/index';
{{/entrySet}}
{{/tsImports}}

import { FSHttpClientImpl, FSRequestOptions, FSResponse, FullStoryOptions, FSHttpClient } from '../../http';
import { chainedFSError } from '../../errors';

{{#operations}}
{{#description}}
/**
 * {{.}}
*/
{{/description}}
export class {{classname}} {
    readonly defaultBasePath = '{{{basePath}}}';
    private basePath = this.defaultBasePath;
    private httpClient: FSHttpClient;

    constructor(opts: FullStoryOptions) {
        // TODO(sabrina): allow injecting http client dependency rather than instantiating here
        this.httpClient = new FSHttpClientImpl(opts);

        // allow pointing to a different host for dev or tests
        if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') {
            this.basePath = process.env.FS_API_HOST || this.defaultBasePath;
        }
    }
{{#operation}}

    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}}{{#unescapedDescription}} {{&.}}{{/unescapedDescription}}{{^unescapedDescription}} {{&description}}{{/unescapedDescription}}
     {{/allParams}}
     {{! TODO(sabrina): @throws error }}
    */
    public async {{nickname}}(request: { {{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}} }, options?: FSRequestOptions): Promise<FSResponse<{{#returnType}}{{{.}}}{{/returnType}}{{^returnType}}void{{/returnType}}>> {
        {{#allParams.0}}const { {{#allParams}}{{paramName}}, {{/allParams}} } = request;{{/allParams.0}}
        const apiPath = `${this.basePath}{{{path}}}`{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
        const url = new URL(apiPath);

        const queryParams: URLSearchParams = new URLSearchParams();
        const headerParams: OutgoingHttpHeaders = {};
        {{! TODO(sabrina): don't have any Form Params for now. Add if needed. }}
        {{ #queryParams }}
        {{#isPrimitiveType}}
        if ({{paramName}} !== undefined) {
            queryParams.set('{{baseName}}', {{^isString}}String({{/isString}}{{paramName}}{{^isString}}){{/isString}});
        }
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        non-primitive-param-type-not-supported! Please update to support the param type{{! // TODO(sabrina): properly serialize non-premitive type param }}
        {{/isPrimitiveType}}
        {{/queryParams}}
        {{#headerParams}}
        if ({{paramName}} !== undefined) {
            headerParams['{{baseName}}'] = {{paramName}};
        }
        {{/headerParams}}
        {{#hasConsumes}}

        const consumes = [{{#consumes}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/consumes}}];
        // prefer 'application/json' if supported
        if (consumes.indexOf('application/json') >= 0) {
            headerParams.accept = 'application/json';
        } else {
            headerParams.accept = consumes.join(',');
        }
        {{/hasConsumes}}

        const queryStr = queryParams.toString();
        const requestOptions: RequestOptions = {
            method: '{{httpMethod}}',
            headers: headerParams,
            hostname: url.hostname,
            host: url.host,
            port: url.port,
            protocol: url.protocol,
            path: url.pathname + (queryStr ? '?' + queryStr : ''),
        };

        try {
            return await this.httpClient.request<{{#bodyParam}}{{dataType}}{{/bodyParam}}{{^bodyParam}}void{{/bodyParam}}, {{#returnType}}{{{.}}}{{/returnType}}{{^returnType}}void{{/returnType}}>(requestOptions{{#bodyParam}}, body{{/bodyParam}}{{^bodyParam}}, undefined{{/bodyParam}}, options);
        } catch (e) {
            // e originates from a callback (node task queue)
            // try to append the current stack trace to the error
            throw chainedFSError(e);
        }
        {{! TODO(Sabrina): Check for AuthMethods.
        server APIs only support api key auth at the moment, no need to optimize prematurely atm. }}
    }
{{/operation}}
}

{{/operations}}