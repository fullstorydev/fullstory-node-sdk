{
  "swagger": "2.0",
  "info": {
    "title": "Introduction",
    "description": "The Users API provides access to basic CRUD functionality for user objects.",
    "version": "v2"
  },
  "tags": [
    {
      "name": "Users"
    }
  ],
  "host": "api.fullstory.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v2/users": {
      "get": {
        "summary": "Get Users",
        "description": "Retrieve a list of users matching the supplied filter criteria",
        "operationId": "ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.ListUsersResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "uid",
            "description": "The application-specific ID you've given to a user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "description": "The email address associated with a user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "display_name",
            "description": "The nice-looking name for a user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_identified",
            "description": "Whether or not a user is anonymous or identified",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page_token",
            "description": "The token indicating the page of users to fetch. The same filter criteria should be supplied. This value should not be specified when requesting the first page of users.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "include_schema",
            "description": "Whether to include schemas in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ],
        "x-fullstory-operation-ordering": 30
      },
      "delete": {
        "summary": "Delete User",
        "description": "Delete a single user by uid.",
        "operationId": "DeleteUserByUid",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.DeleteUserResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "uid",
            "description": "The application-specific ID you've given to the user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create User",
        "description": "Creates a user with the specified details. This request can be [made idempotent](../../idempotent-requests).",
        "operationId": "CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.CreateUserResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.CreateUserRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "x-fullstory-operation-ordering": 10
      }
    },
    "/v2/users/batch": {
      "post": {
        "summary": "Create Batch Import",
        "description": "Creates a batch user import job with the given list of users' information. Users are upserted (created if they do not exist or updated if they do exist).\n\n### Payload Limits\n\nThe number of request objects that can be included in a single batch request is `50,000`. This request can be [made idempotent](../../idempotent-requests).",
        "operationId": "CreateBatchUserImportJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.CreateBatchUserImportJobResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.CreateBatchUserImportJobRequest"
            }
          }
        ],
        "tags": [
          "Users",
          "Batch Import"
        ],
        "x-fullstory-operation-ordering": 10
      }
    },
    "/v2/users/batch/{job_id}": {
      "get": {
        "summary": "Get Batch Import Job Details",
        "description": "Get the status for a batch user import job with job details.",
        "operationId": "GetBatchUserImportStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.job.JobStatusResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "job_id",
            "description": "ID that can be used to check the status and retrieve results for the batch import",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "Batch Import"
        ],
        "x-fullstory-operation-ordering": 20
      }
    },
    "/v2/users/batch/{job_id}/errors": {
      "get": {
        "summary": "Get Batch Import Errors",
        "description": "Get the error message and code for any users that failed from a user import job.",
        "operationId": "GetBatchUserImportErrors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.GetBatchUserImportErrorsResponse"
            }
          },
          "202": {
            "description": "Returned when this API is called while the job that is still processing.",
            "schema": { }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "job_id",
            "description": "ID that can be used to check the status and retrieve results for the batch import",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_token",
            "description": "The token that can be used in a request to fetch the next page of results",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "Batch Import"
        ],
        "x-fullstory-operation-ordering": 40
      }
    },
    "/v2/users/batch/{job_id}/imports": {
      "get": {
        "summary": "Get Batch Imported Users",
        "description": "Get the FullStory uid and user details for successful users imported from a batch user import job.",
        "operationId": "GetBatchUserImports",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.GetBatchUserImportsResponse"
            }
          },
          "202": {
            "description": "Returned when this API is called while the job that is still processing.",
            "schema": { }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "job_id",
            "description": "ID that can be used to check the status and retrieve results for the batch import",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_token",
            "description": "The token that can be used in a request to fetch the next page of results",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "include_schema",
            "description": "Whether to include schemas in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users",
          "Batch Import"
        ],
        "x-fullstory-operation-ordering": 30
      }
    },
    "/v2/users/{id}": {
      "get": {
        "summary": "Get User",
        "description": "Retrieve details for a single user",
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.GetUserResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The FullStory assigned user ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "include_schema",
            "description": "Whether to include the schema in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ],
        "x-fullstory-operation-ordering": 20
      },
      "delete": {
        "summary": "Delete User",
        "description": "Delete a single user. `id` may be supplied as a path parameter, or `uid` as a query parameter. One or the other is required. ex: `/v2beta/users?uid={uid}` or `/v2beta/users/{id}`",
        "operationId": "DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.DeleteUserResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The FullStory-generated id for the user - not required if `uid` is passed as a query parameter",
            "in": "path",
            "required": true,
            "type": "string",
            "x-fullstory-sdk-description-override": "The FullStory-generated id for the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "x-fullstory-operation-ordering": 50,
        "x-fullstory-sdk-description-override": "Delete a single user by FullStory generated user ID."
      },
      "post": {
        "summary": "Update User",
        "description": "Updates a user with the specified details",
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.UpdateUserResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The FullStory assigned user ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.UpdateUserRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "x-fullstory-operation-ordering": 40
      }
    },
    "/v2beta/users": {
      "get": {
        "summary": "Get Users",
        "description": "Retrieve a list of users matching the supplied filter criteria",
        "operationId": "ListUsers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.ListUsersResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "uid",
            "description": "The application-specific ID you've given to a user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "description": "The email address associated with a user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "display_name",
            "description": "The nice-looking name for a user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_identified",
            "description": "Whether or not a user is anonymous or identified",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page_token",
            "description": "The token indicating the page of users to fetch. The same filter criteria should be supplied. This value should not be specified when requesting the first page of users.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "include_schema",
            "description": "Whether to include schemas in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ],
        "x-fullstory-operation-ordering": 30
      },
      "delete": {
        "summary": "Delete User",
        "description": "Delete a single user by uid.",
        "operationId": "DeleteUserByUid2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.DeleteUserResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "uid",
            "description": "The application-specific ID you've given to the user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create User",
        "description": "Creates a user with the specified details. This request can be [made idempotent](../../idempotent-requests).",
        "operationId": "CreateUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.CreateUserResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.CreateUserRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "x-fullstory-operation-ordering": 10
      }
    },
    "/v2beta/users/batch": {
      "post": {
        "summary": "Create Batch Import",
        "description": "Creates a batch user import job with the given list of users' information. Users are upserted (created if they do not exist or updated if they do exist).\n\n### Payload Limits\n\nThe number of request objects that can be included in a single batch request is `50,000`. This request can be [made idempotent](../../idempotent-requests).",
        "operationId": "CreateBatchUserImportJob2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.CreateBatchUserImportJobResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.CreateBatchUserImportJobRequest"
            }
          }
        ],
        "tags": [
          "Users",
          "Batch Import"
        ],
        "x-fullstory-operation-ordering": 10
      }
    },
    "/v2beta/users/batch/{job_id}": {
      "get": {
        "summary": "Get Batch Import Job Details",
        "description": "Get the status for a batch user import job with job details.",
        "operationId": "GetBatchUserImportStatus2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.job.JobStatusResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "job_id",
            "description": "ID that can be used to check the status and retrieve results for the batch import",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "Batch Import"
        ],
        "x-fullstory-operation-ordering": 20
      }
    },
    "/v2beta/users/batch/{job_id}/errors": {
      "get": {
        "summary": "Get Batch Import Errors",
        "description": "Get the error message and code for any users that failed from a user import job.",
        "operationId": "GetBatchUserImportErrors2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.GetBatchUserImportErrorsResponse"
            }
          },
          "202": {
            "description": "Returned when this API is called while the job that is still processing.",
            "schema": { }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "job_id",
            "description": "ID that can be used to check the status and retrieve results for the batch import",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_token",
            "description": "The token that can be used in a request to fetch the next page of results",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "Batch Import"
        ],
        "x-fullstory-operation-ordering": 40
      }
    },
    "/v2beta/users/batch/{job_id}/imports": {
      "get": {
        "summary": "Get Batch Imported Users",
        "description": "Get the FullStory uid and user details for successful users imported from a batch user import job.",
        "operationId": "GetBatchUserImports2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.GetBatchUserImportsResponse"
            }
          },
          "202": {
            "description": "Returned when this API is called while the job that is still processing.",
            "schema": { }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "job_id",
            "description": "ID that can be used to check the status and retrieve results for the batch import",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_token",
            "description": "The token that can be used in a request to fetch the next page of results",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "include_schema",
            "description": "Whether to include schemas in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users",
          "Batch Import"
        ],
        "x-fullstory-operation-ordering": 30
      }
    },
    "/v2beta/users/{id}": {
      "get": {
        "summary": "Get User",
        "description": "Retrieve details for a single user",
        "operationId": "GetUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.GetUserResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The FullStory assigned user ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "include_schema",
            "description": "Whether to include the schema in the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ],
        "x-fullstory-operation-ordering": 20
      },
      "delete": {
        "summary": "Delete User",
        "description": "Delete a single user. `id` may be supplied as a path parameter, or `uid` as a query parameter. One or the other is required. ex: `/v2beta/users?uid={uid}` or `/v2beta/users/{id}`",
        "operationId": "DeleteUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.DeleteUserResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The FullStory-generated id for the user - not required if `uid` is passed as a query parameter",
            "in": "path",
            "required": true,
            "type": "string",
            "x-fullstory-sdk-description-override": "The FullStory-generated id for the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "x-fullstory-operation-ordering": 50,
        "x-fullstory-sdk-description-override": "Delete a single user by FullStory generated user ID."
      },
      "post": {
        "summary": "Update User",
        "description": "Updates a user with the specified details",
        "operationId": "UpdateUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.UpdateUserResponse"
            }
          },
          "400": {
            "description": "Returned when invalid input has been provided. Fix the issue and retry.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "uid is required",
                "code": "required_field"
              }
            }
          },
          "401": {
            "description": "Returned when access to the resource is unauthorized.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "access is unauthorized",
                "code": "unauthorized"
              }
            }
          },
          "403": {
            "description": "Returned when access is not allowed due to insufficient permissions.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "insufficient permissions",
                "code": "forbidden"
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Requested resource does not exist",
                "code": "resource_not_found"
              }
            }
          },
          "429": {
            "description": "Returned when the client has exceeded the rate limit for this endpoint. A `Retry-After` header will be included with the response. This header will contain the number of seconds that you should wait before attempting to send another request.",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Too many requests. Client has exceeded the rate limit for this endpoint.",
                "code": "too_many_requests"
              }
            }
          },
          "500": {
            "description": "Returned when a server error is encountered",
            "schema": {
              "$ref": "#/definitions/fullstory.v2.apierror.ErrorResponse",
              "example": {
                "message": "Server error was encountered",
                "code": "server_error"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The FullStory assigned user ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fullstory.v2.users.UpdateUserRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "x-fullstory-operation-ordering": 40
      }
    }
  },
  "definitions": {
    "fullstory.v2.apierror.ErrorResponse": {
      "type": "object",
      "example": {
        "message": "User with that ID does not exist",
        "code": "user_not_found"
      },
      "properties": {
        "message": {
          "type": "string",
          "description": "Long form description of what went wrong"
        },
        "code": {
          "type": "string",
          "description": "A short snake-cased value that is safe to handle programmatically"
        }
      },
      "description": "A structured error response from the server",
      "required": [
        "message",
        "code"
      ]
    },
    "fullstory.v2.job.JobMetadata": {
      "type": "object",
      "example": {
        "id": "abc123",
        "status": "PROCESSING",
        "created": "2017-01-15T01:30:15.01Z",
        "finished": "2017-01-15T02:30:15.01Z"
      },
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the job."
        },
        "status": {
          "$ref": "#/definitions/fullstory.v2.job.JobStatus",
          "description": "Status of the job."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Time the job was accepted."
        },
        "finished": {
          "type": "string",
          "format": "date-time",
          "description": "Time the job was finished, either successfully or unsuccessfully."
        }
      },
      "description": "JobMetadata contains metadata about asynchronous jobs.",
      "title": "JobMetadata",
      "required": [
        "id",
        "status",
        "created"
      ]
    },
    "fullstory.v2.job.JobStatus": {
      "type": "string",
      "enum": [
        "PROCESSING",
        "COMPLETED",
        "FAILED"
      ],
      "default": "UNKNOWN",
      "description": " - PROCESSING: Indicates that the job has been accepted by FullStory and is being processed.\n - COMPLETED: Indicates that the job has been completed successfully without any errors.\n - FAILED: Indicates that the job has failures, including partial failures."
    },
    "fullstory.v2.job.JobStatusResponse": {
      "type": "object",
      "example": {
        "imports": 42,
        "errors": 2,
        "job": {
          "id": "abd123=",
          "status": "FAILED",
          "created": "2019-04-18T14:36:11.123Z",
          "finished": "2019-04-18T15:36:11.123Z"
        }
      },
      "properties": {
        "imports": {
          "type": "integer",
          "format": "int32",
          "description": "The stats on the number of items imported successfully"
        },
        "errors": {
          "type": "integer",
          "format": "int32",
          "description": "Only included for failed imports. The stats on the number of items that failed to be imported"
        },
        "job": {
          "$ref": "#/definitions/fullstory.v2.job.JobMetadata",
          "description": "Information about the current state of the job"
        }
      },
      "description": "Server response for the job status",
      "required": [
        "imports",
        "errors",
        "job"
      ]
    },
    "fullstory.v2.users.BatchUserImportRequest": {
      "type": "object",
      "example": {
        "id": "123",
        "uid": "xyz123",
        "display_name": "Daniel Falko",
        "email": "daniel.falko@example.com",
        "properties": {
          "pricing_plan": "paid",
          "popup_help": true,
          "total_spent": 14.55
        }
      },
      "properties": {
        "id": {
          "type": "string",
          "description": "The FullStory assigned user ID"
        },
        "uid": {
          "type": "string",
          "description": "The application-specific ID you've given to the user",
          "maxLength": 256
        },
        "display_name": {
          "type": "string",
          "description": "The nice-looking name for this user",
          "maxLength": 256
        },
        "email": {
          "type": "string",
          "description": "The email address associated with this user",
          "maxLength": 128
        },
        "properties": {
          "type": "object",
          "description": "Properties that provide additional information about your user.\n - Up to 500 unique properties are allowed.\n - Property names must be a sequence of alphanumeric characters A-Z, a-z, or 0-9 and underscores (\"_\").\n - Property names must start with an alphabetic character (A-Z or a-z).\n - The maximum property name length is 512 characters.\n - Property values may also contain nested objects. Properties within nested objects must still conform to the naming requirements. For nested objects, the property name including the dotted concatenation of all its parent properties must still be under the length limit of 512 characters.\n - Property values have a maximum size of 8192 bytes. If the value for the property is larger than this limit, the property will be rejected.",
          "maxProperties": 500
        },
        "schema": {
          "$ref": "#/definitions/fullstory.v2.varsapi.Schema",
          "description": "Optional schema declaration, to define the structure of the data and override FullStory's default type inference."
        }
      },
      "description": "The request payloads contains the user data to be imported"
    },
    "fullstory.v2.users.BatchUserImportResponse": {
      "type": "object",
      "example": {
        "id": "987654321",
        "uid": "xyz123",
        "display_name": "Daniel Falko",
        "email": "daniel.falko@example.com",
        "properties": {
          "pricing_plan": "paid",
          "popup_help": true,
          "total_spent": 14.55
        }
      },
      "properties": {
        "id": {
          "type": "string",
          "description": "The FullStory assigned user ID",
          "maxLength": 256
        },
        "uid": {
          "type": "string",
          "description": "The application-specific ID you've given to the user",
          "maxLength": 256
        },
        "display_name": {
          "type": "string",
          "description": "The nice-looking name for this user",
          "maxLength": 256
        },
        "email": {
          "type": "string",
          "description": "The email address associated with this user",
          "maxLength": 128
        },
        "properties": {
          "type": "object",
          "description": "Properties that provide additional information about your user.\n - Up to 500 unique properties are allowed.\n - Property names must be a sequence of alphanumeric characters A-Z, a-z, or 0-9 and underscores (\"_\").\n - Property names must start with an alphabetic character (A-Z or a-z).\n - The maximum property name length is 512 characters.\n - Property values may also contain nested objects. Properties within nested objects must still conform to the naming requirements. For nested objects, the property name including the dotted concatenation of all its parent properties must still be under the length limit of 512 characters.\n - Property values have a maximum size of 8192 bytes. If the value for the property is larger than this limit, the property will be rejected.",
          "maxProperties": 500
        },
        "schema": {
          "$ref": "#/definitions/fullstory.v2.varsapi.Schema",
          "description": "A mapping from fields to their types, whether inferred automatically or declared in the request."
        },
        "type_conflicts": {
          "$ref": "#/definitions/fullstory.v2.varsapi.TypeConflict",
          "description": "Any fields that are associated with multiple types."
        }
      },
      "description": "Server response for a batch user imported",
      "required": [
        "id"
      ]
    },
    "fullstory.v2.users.CreateBatchUserImportJobRequest": {
      "type": "object",
      "example": {
        "requests": [
          {
            "uid": "xyz123",
            "properties": {
              "rewards_status": "platinum"
            }
          }
        ]
      },
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fullstory.v2.users.BatchUserImportRequest"
          },
          "description": "The list of users and their information that should be imported in this batch request"
        }
      },
      "required": [
        "requests"
      ]
    },
    "fullstory.v2.users.CreateBatchUserImportJobResponse": {
      "type": "object",
      "example": {
        "job": {
          "id": "otpo123",
          "status": "PROCESSING",
          "created": "2019-04-18T14:36:11.123Z"
        }
      },
      "properties": {
        "job": {
          "$ref": "#/definitions/fullstory.v2.job.JobMetadata",
          "description": "Information about the job that was initiated to import the list of users submitted"
        }
      },
      "required": [
        "job"
      ]
    },
    "fullstory.v2.users.CreateUserRequest": {
      "type": "object",
      "example": {
        "uid": "xyz123",
        "display_name": "Daniel Falko",
        "email": "daniel.falko@example.com",
        "properties": {
          "pricing_plan": "paid",
          "popup_help": true,
          "total_spent": 14.55
        }
      },
      "properties": {
        "uid": {
          "type": "string",
          "description": "The application-specific ID you've given to the user",
          "maxLength": 256
        },
        "display_name": {
          "type": "string",
          "description": "The nice-looking name for this user",
          "maxLength": 256
        },
        "email": {
          "type": "string",
          "description": "The email address associated with this user",
          "maxLength": 128
        },
        "properties": {
          "type": "object",
          "description": "Properties that provide additional information about your user.\n - Up to 500 unique properties are allowed.\n - Property names must be a sequence of alphanumeric characters A-Z, a-z, or 0-9 and underscores (\"_\").\n - Property names must start with an alphabetic character (A-Z or a-z).\n - The maximum property name length is 512 characters.\n - Property values may also contain nested objects. Properties within nested objects must still conform to the naming requirements. For nested objects, the property name including the dotted concatenation of all its parent properties must still be under the length limit of 512 characters.\n - Property values have a maximum size of 8192 bytes. If the value for the property is larger than this limit, the property will be rejected.",
          "maxProperties": 500
        },
        "schema": {
          "$ref": "#/definitions/fullstory.v2.varsapi.Schema",
          "description": "Optional schema declaration, to define the structure of the data and override FullStory's default type inference."
        }
      }
    },
    "fullstory.v2.users.CreateUserResponse": {
      "type": "object",
      "example": {
        "id": "987654321"
      },
      "properties": {
        "id": {
          "type": "string",
          "description": "The FullStory assigned user ID"
        }
      },
      "description": "Server response for creating a user",
      "required": [
        "id"
      ]
    },
    "fullstory.v2.users.DeleteUserResponse": {
      "type": "object"
    },
    "fullstory.v2.users.GetBatchUserImportErrorsResponse": {
      "type": "object",
      "example": {
        "results": [
          {
            "message": "The error message",
            "code": "error_code",
            "user": {
              "uid": "xyz123",
              "display_name": "Daniel Falko",
              "email": "daniel.falko@example.com",
              "properties": {
                "pricing_plan": "paid",
                "popup_help": true,
                "total_spent": 14.55
              }
            }
          },
          {
            "message": "The error message",
            "code": "error_code",
            "user": {
              "display_name": "Stan Bandee",
              "email": "stan.bandee@example.com",
              "properties": {
                "pricing_plan": "free",
                "popup_help": true,
                "total_spent": 0
              }
            }
          }
        ],
        "total_records": "98",
        "next_page_token": "asd543"
      },
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fullstory.v2.users.GetBatchUserImportErrorsResponse.FailedUserImport"
          },
          "description": "Page of user import failures for the batch import"
        },
        "total_records": {
          "type": "string",
          "description": "The total number of failures for the specified user import"
        },
        "next_page_token": {
          "type": "string",
          "description": "The token that can be used in a subsequent request to fetch the next page of import failures"
        }
      },
      "description": "Server response for retrieving batch users import errors",
      "required": [
        "total_records"
      ]
    },
    "fullstory.v2.users.GetBatchUserImportErrorsResponse.FailedUserImport": {
      "type": "object",
      "example": {
        "message": "The error message",
        "code": "error_code",
        "user": {
          "id": 123,
          "uid": "xyz123",
          "display_name": "Daniel Falko",
          "email": "daniel.falko@example.com",
          "properties": {
            "pricing_plan": "paid",
            "popup_help": true,
            "total_spent": 14.55
          }
        }
      },
      "properties": {
        "message": {
          "type": "string",
          "description": "Description of the failure encountered while importing the user"
        },
        "code": {
          "type": "string",
          "description": "Error code"
        },
        "user": {
          "$ref": "#/definitions/fullstory.v2.users.BatchUserImportRequest",
          "description": "Corresponding user import request that resulted in failure"
        }
      },
      "description": "Server response for failed batch users",
      "required": [
        "message",
        "code",
        "user"
      ]
    },
    "fullstory.v2.users.GetBatchUserImportsResponse": {
      "type": "object",
      "example": {
        "results": [
          {
            "uid": "xyz123",
            "display_name": "Daniel Falko",
            "email": "daniel.falko@example.com",
            "properties": {
              "pricing_plan": "paid",
              "popup_help": true,
              "total_spent": 14.55
            }
          },
          {
            "uid": "xyz124",
            "display_name": "Steve Falko",
            "email": "steve.falko@example.com",
            "properties": {
              "pricing_plan": "paid",
              "popup_help": true,
              "total_spent": 14.55
            }
          }
        ],
        "total_records": "98",
        "next_page_token": "asd543"
      },
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fullstory.v2.users.BatchUserImportResponse"
          },
          "description": "Page of user import responses for the batch import"
        },
        "total_records": {
          "type": "string",
          "description": "Total number of records in this batch import"
        },
        "next_page_token": {
          "type": "string",
          "description": "The token that can be used in a subsequent request to fetch the next page of import results"
        }
      },
      "description": "Server response for retrieving batch users imported",
      "required": [
        "results",
        "total_records"
      ]
    },
    "fullstory.v2.users.GetUserResponse": {
      "type": "object",
      "example": {
        "id": "987654321",
        "uid": "xyz123",
        "display_name": "Daniel Falko",
        "email": "daniel.falko@example.com",
        "properties": {
          "pricing_plan": "paid",
          "popup_help": true,
          "total_spent": 14.55
        }
      },
      "properties": {
        "id": {
          "type": "string",
          "description": "The FullStory assigned user ID"
        },
        "uid": {
          "type": "string",
          "description": "The application-specific ID you've given to the user",
          "maxLength": 256
        },
        "display_name": {
          "type": "string",
          "description": "The nice-looking name for this user",
          "maxLength": 256
        },
        "email": {
          "type": "string",
          "description": "The email address associated with this user",
          "maxLength": 128
        },
        "is_being_deleted": {
          "type": "boolean",
          "description": "Indicates whether or not this user is in the process of being removed"
        },
        "properties": {
          "type": "object",
          "description": "Properties that provide additional information about your user.\n - Up to 500 unique properties are allowed.\n - Property names must be a sequence of alphanumeric characters A-Z, a-z, or 0-9 and underscores (\"_\").\n - Property names must start with an alphabetic character (A-Z or a-z).\n - The maximum property name length is 512 characters.\n - Property values may also contain nested objects. Properties within nested objects must still conform to the naming requirements. For nested objects, the property name including the dotted concatenation of all its parent properties must still be under the length limit of 512 characters.\n - Property values have a maximum size of 8192 bytes. If the value for the property is larger than this limit, the property will be rejected.",
          "maxProperties": 500
        },
        "schema": {
          "$ref": "#/definitions/fullstory.v2.varsapi.Schema",
          "description": "A mapping from fields to their types, whether inferred automatically or declared in the request."
        },
        "type_conflicts": {
          "$ref": "#/definitions/fullstory.v2.varsapi.TypeConflict",
          "description": "Any fields that are associated with multiple types."
        },
        "app_url": {
          "type": "string",
          "description": "A link to the FullStory app segments page, focused on this user."
        }
      },
      "description": "Server response payload for retrieving a single user",
      "required": [
        "id",
        "is_being_deleted"
      ]
    },
    "fullstory.v2.users.ListUsersResponse": {
      "type": "object",
      "example": {
        "results": [
          {
            "id": "987654321",
            "uid": "xyz123",
            "display_name": "Daniel Falko",
            "email": "daniel.falko@example.com",
            "properties": {
              "pricing_plan": "paid",
              "popup_help": true,
              "total_spent": 14.55
            }
          }
        ],
        "total_records": "1200",
        "next_page_token": "asd543"
      },
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fullstory.v2.users.GetUserResponse"
          },
          "description": "The list of users that match the input filter criteria"
        },
        "total_records": {
          "type": "string",
          "description": "The total number of users that matched the filter criteria"
        },
        "next_page_token": {
          "type": "string",
          "description": "The token that can be used in a subsequent request with the same filter criteria to fetch the next page of users"
        },
        "app_url": {
          "type": "string",
          "description": "A link to an anonymous segment in the FullStory app containing these users."
        }
      },
      "description": "Server response for listing all users satisfying the request",
      "required": [
        "results",
        "total_records"
      ]
    },
    "fullstory.v2.users.UpdateUserRequest": {
      "type": "object",
      "example": {
        "uid": "xyz123",
        "display_name": "Daniel Falko",
        "email": "daniel.falko@example.com",
        "properties": {
          "pricing_plan": "paid",
          "popup_help": true,
          "total_spent": 14.55
        }
      },
      "properties": {
        "uid": {
          "type": "string",
          "description": "The application-specific ID you've given to the user",
          "maxLength": 256
        },
        "display_name": {
          "type": "string",
          "description": "The nice-looking name for this user",
          "maxLength": 256
        },
        "email": {
          "type": "string",
          "description": "The email address associated with this user",
          "maxLength": 128
        },
        "properties": {
          "type": "object",
          "description": "Properties that provide additional information about your user.\n - Up to 500 unique properties are allowed.\n - Property names must be a sequence of alphanumeric characters A-Z, a-z, or 0-9 and underscores (\"_\").\n - Property names must start with an alphabetic character (A-Z or a-z).\n - The maximum property name length is 512 characters.\n - Property values may also contain nested objects. Properties within nested objects must still conform to the naming requirements. For nested objects, the property name including the dotted concatenation of all its parent properties must still be under the length limit of 512 characters.\n - Property values have a maximum size of 8192 bytes. If the value for the property is larger than this limit, the property will be rejected.",
          "maxProperties": 500
        },
        "schema": {
          "$ref": "#/definitions/fullstory.v2.varsapi.Schema",
          "description": "Optional schema declaration, to define the structure of the data and override FullStory's default type inference."
        }
      },
      "description": "Request payload for updating a user"
    },
    "fullstory.v2.users.UpdateUserResponse": {
      "type": "object",
      "example": {
        "id": "987654321"
      },
      "properties": {
        "id": {
          "type": "string",
          "description": "The FullStory assigned user ID",
          "maxLength": 256
        }
      },
      "description": "Server response payload for updating a user",
      "required": [
        "id"
      ]
    },
    "fullstory.v2.varsapi.Schema": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "object",
          "description": "A mapping of field names to their corresponding types."
        }
      }
    },
    "fullstory.v2.varsapi.TypeConflict": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "object",
          "description": "Any fields that are associated with multiple types."
        }
      }
    },
    "google.protobuf.NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "description": "The HTTP API requires an API key that you can generate from the FullStory app. The API key must have Admin or Architect level permissions for requests which retrieve data. The header value takes the form \"Basic {YOUR_API_KEY}\"",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": [ ]
    }
  ]
}
