/**
 * This file is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit manually.
 */

export * from './ApierrorErrorResponse';
export * from './GetBatchUserImportErrorsResponseFailedUserImport';
export * from './JobJobMetadata';
export * from './JobJobStatus';
export * from './ProtobufNullValue';
export * from './UsersBatchUserImportRequest';
export * from './UsersBatchUserImportResponse';
export * from './UsersCreateBatchUserImportJobRequest';
export * from './UsersCreateBatchUserImportJobResponse';
export * from './UsersCreateUserRequest';
export * from './UsersCreateUserResponse';
export * from './UsersGetBatchUserImportErrorsResponse';
export * from './UsersGetBatchUserImportStatusResponse';
export * from './UsersGetBatchUserImportsResponse';
export * from './UsersGetUserResponse';
export * from './UsersListUsersResponse';
export * from './UsersUpdateUserRequest';
export * from './UsersUpdateUserResponse';
import { ApierrorErrorResponse } from './ApierrorErrorResponse';
import { GetBatchUserImportErrorsResponseFailedUserImport } from './GetBatchUserImportErrorsResponseFailedUserImport';
import { JobJobMetadata } from './JobJobMetadata';
import { JobJobStatus } from './JobJobStatus';
import { ProtobufNullValue } from './ProtobufNullValue';
import { UsersBatchUserImportRequest } from './UsersBatchUserImportRequest';
import { UsersBatchUserImportResponse } from './UsersBatchUserImportResponse';
import { UsersCreateBatchUserImportJobRequest } from './UsersCreateBatchUserImportJobRequest';
import { UsersCreateBatchUserImportJobResponse } from './UsersCreateBatchUserImportJobResponse';
import { UsersCreateUserRequest } from './UsersCreateUserRequest';
import { UsersCreateUserResponse } from './UsersCreateUserResponse';
import { UsersGetBatchUserImportErrorsResponse } from './UsersGetBatchUserImportErrorsResponse';
import { UsersGetBatchUserImportStatusResponse } from './UsersGetBatchUserImportStatusResponse';
import { UsersGetBatchUserImportsResponse } from './UsersGetBatchUserImportsResponse';
import { UsersGetUserResponse } from './UsersGetUserResponse';
import { UsersListUsersResponse } from './UsersListUsersResponse';
import { UsersUpdateUserRequest } from './UsersUpdateUserRequest';
import { UsersUpdateUserResponse } from './UsersUpdateUserResponse';

const primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

const enumsMap: {[index: string]: any} = {
        "JobJobStatus": JobJobStatus,
        "ProtobufNullValue": ProtobufNullValue,
}

const typeMap: {[index: string]: any} = {
    "ApierrorErrorResponse": ApierrorErrorResponse,
    "GetBatchUserImportErrorsResponseFailedUserImport": GetBatchUserImportErrorsResponseFailedUserImport,
    "JobJobMetadata": JobJobMetadata,
    "UsersBatchUserImportRequest": UsersBatchUserImportRequest,
    "UsersBatchUserImportResponse": UsersBatchUserImportResponse,
    "UsersCreateBatchUserImportJobRequest": UsersCreateBatchUserImportJobRequest,
    "UsersCreateBatchUserImportJobResponse": UsersCreateBatchUserImportJobResponse,
    "UsersCreateUserRequest": UsersCreateUserRequest,
    "UsersCreateUserResponse": UsersCreateUserResponse,
    "UsersGetBatchUserImportErrorsResponse": UsersGetBatchUserImportErrorsResponse,
    "UsersGetBatchUserImportStatusResponse": UsersGetBatchUserImportStatusResponse,
    "UsersGetBatchUserImportsResponse": UsersGetBatchUserImportsResponse,
    "UsersGetUserResponse": UsersGetUserResponse,
    "UsersListUsersResponse": UsersListUsersResponse,
    "UsersUpdateUserRequest": UsersUpdateUserRequest,
    "UsersUpdateUserResponse": UsersUpdateUserResponse,
}

export class ObjectSerializer {
    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            const discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    const discriminatorType = data[discriminatorProperty];
                    if(typeMap[discriminatorType]){
                        return discriminatorType; // use the type given in the discriminator
                    } else {
                        return expectedType; // discriminator did not map to a type
                    }
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            const transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                const datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toISOString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // Get the actual type of this object
            type = this.findCorrectType(data, type);

            // get the map for the correct type.
            const attributeTypes = typeMap[type].getAttributeTypeMap();
            const instance: {[index: string]: any} = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                const attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            const transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                const datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            const instance = new typeMap[type]();
            const attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                const attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
