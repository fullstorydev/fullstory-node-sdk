/* eslint-disable simple-import-sort/exports */
/* eslint-disable simple-import-sort/imports */

/**
 * This file is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Generated from operation: EventsApi
 * Do not edit manually.
 */

import { OutgoingHttpHeaders } from 'node:http';
import { RequestOptions } from 'node:https';

import { CreateEventsRequest , ErrorResponse } from '@model/index';

import { FSHttpClientImpl, FSRequestOptions, FSResponse, FullStoryOptions, FSHttpClient } from '../../http';
import { chainedFSError } from '../../errors';

export class EventsApi {
    readonly defaultBasePath = 'https://api.fullstory.com';
    private basePath = this.defaultBasePath;
    private httpClient: FSHttpClient;

    constructor(opts: FullStoryOptions) {
        // TODO(sabrina): allow injecting http client dependency rather than instantiating here
        this.httpClient = new FSHttpClientImpl(opts);

        // allow pointing to a different host for dev or tests
        if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') {
            this.basePath = process.env.FS_API_HOST || this.defaultBasePath;
        }
    }

    /**
     * Creates one event with the specified details. This request can be [made idempotent](../../idempotent-requests).
     * @summary Create Events
     * @param body
    */
    public async createEvents(body: CreateEventsRequest, options?: FSRequestOptions): Promise<FSResponse<void>> {
        const apiPath = `${this.basePath}/v2beta/events`;
        const url = new URL(apiPath);

        const queryParams: URLSearchParams = new URLSearchParams();
        const headerParams: OutgoingHttpHeaders = {};

        const consumes = ['application/json'];
        // prefer 'application/json' if supported
        if (consumes.indexOf('application/json') >= 0) {
            headerParams.accept = 'application/json';
        } else {
            headerParams.accept = consumes.join(',');
        }

        const queryStr = queryParams.toString();
        const requestOptions: RequestOptions = {
            method: 'POST',
            headers: headerParams,
            hostname: url.hostname,
            host: url.host,
            port: url.port,
            protocol: url.protocol,
            path: url.pathname + (queryStr ? '?' + queryStr : ''),
        };

        try {
            return await this.httpClient.request<CreateEventsRequest, void>(requestOptions, body, options);
        } catch (e) {
            // e originates from a callback (node task queue)
            // try to append the current stack trace to the error
            throw chainedFSError(e);
        }
    }
}

