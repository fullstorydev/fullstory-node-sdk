/* eslint-disable simple-import-sort/exports */
/* eslint-disable simple-import-sort/imports */

/**
 * This file is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Generated from operation: EventsApi
 * Do not edit manually.
 */

import { OutgoingHttpHeaders } from 'node:http';
import { RequestOptions } from 'node:https';

import { CreateEventsResponse } from '@model/events/CreateEventsResponse';
import { CreateEventsRequest } from '@model/events/CreateEventsRequest';
import { ErrorResponse } from '@model/apierror/ErrorResponse';

import { FSHttpClient, FSRequestOptions, FSResponse, FullStoryOptions, IFSHttpClient } from '../../http';
import { FSErrorImpl } from '../../errors';
export class EventsApi {
    protected readonly basePath = 'https://api.fullstory.com';
    private httpClient: IFSHttpClient;

    constructor(opts: FullStoryOptions) {
        // TODO(sabrina): allow injecting http client dependency rather than instantiating here
        this.httpClient = new FSHttpClient(opts);
    }

    /**
     * Creates one or more events with the specified details
     * @summary Create Events
     * @param body
    */
    public async createEvents(body: CreateEventsRequest, options?: FSRequestOptions): Promise<FSResponse<CreateEventsResponse>> {
        const apiPath = `${this.basePath}/v2beta/events`;
        const url = new URL(apiPath);

        const queryParams: URLSearchParams = new URLSearchParams();
        const headerParams: OutgoingHttpHeaders = {};

        const consumes = ['application/json'];
        // prefer 'application/json' if supported
        if (consumes.indexOf('application/json') >= 0) {
            headerParams.accept = 'application/json';
        } else {
            headerParams.accept = consumes.join(',');
        }

        const queryStr = queryParams.toString();
        const requestOptions: RequestOptions = {
            method: 'POST',
            headers: headerParams,
            hostname: url.hostname,
            path: url.pathname + (queryStr ? '?' + queryStr : ''),
        };

        try {
            return await this.httpClient.request<CreateEventsRequest, CreateEventsResponse>(requestOptions, body, options);
        } catch (e) {
            // e originates from a callback (node task queue)
            // try to append the current stack trace to the error
            throw FSErrorImpl.newAsyncError(e);
        }
    }
}


